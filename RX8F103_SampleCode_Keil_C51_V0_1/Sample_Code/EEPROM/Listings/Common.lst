C51 COMPILER V9.56.0.0   COMMON                                                            06/05/2021 17:28:18 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMMON
OBJECT MODULE PLACED IN .\Output\Common.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\..\Common\Common.c OMF2 OPTIMIZE(4,SPEED) BROWSE MODC2 INCDIR(..\..\I
                    -nclude) DEFINE(FOSC_160000) DEBUG PRINT(.\Listings\Common.lst) TABS(2) OBJECT(.\Output\Common.obj)

line level    source

   1          /**
   2           ****************************************************************************
   3           * @file    Common.c
   4           * @author  Cat.chen
   5           * @version V0.1
   6           * @date    2021/03/15
   7           * @brief   C Template file for RX8F103 microcontroller.
   8           ****************************************************************************
   9           *  UNPUBLISHED PROPRIETARY SOURCE CODE
  10           *  Copyright (c) 2021 RaySilicon Inc.
  11           *
  12           *  The contents of this file may not be disclosed to third parties, copied or
  13           *  duplicated in any form, in whole or in part, without the prior written
  14           *  permission of RaySilicon Corporation.
  15           *  RaySilicon Technoledge Corp. 
  16           *  Website: http://www.raySilicon.com
  17           *  E-Mail : catchen@raySilicon.com
  18           *  Date   : Mar/15/2021
  19           ****************************************************************************
  20           **/
  21          
  22          #include <stdio.h>
  23          #include "RX8F103.h"
  24          #include "Define.h"
  25          #include "Common.h"
  26          #include "Delay.h"
  27          #include "SFR_Assemble.h"
  28          #include "Function_Assemble.h"
  29          
  30          //----------------------------------------------------------------------------------
  31          // use timer1 as Baudrate generator, Maxmum Baudrate can ???? bps @ 16MHZ
  32          //----------------------------------------------------------------------------------
  33          void InitialUART0(u32 u32Baudrate)
  34          {
  35   1        set_UART0PORTEN;  //串口0端口使能
  36   1        S0CON = 0x50;     //SCON: Mode 1, 8-bit UART, Enable Rcvr
  37   1        S0RELL = LOBYTE(1024 - (baudrat_clk/u32Baudrate));    //Baud rate  = SYSCK/(16×(1024-S1REL))  SYSCK跟CLKDI
             -V寄存器有关
  38   1        S0RELH = HIBYTE(1024 - (baudrat_clk/u32Baudrate));    //S1RELH + S1RELL  构成波特率设置S1REL[9:0] 波特率：1
             -15200
  39   1      
  40   1        set_ES0;          //允许串口中断位
  41   1      }
  42          
  43          u8 Receive_Data_From_UART0(void)
  44          {
  45   1          u8 c;  
  46   1          while (!RI0);
  47   1          c = S0BUF;
  48   1          RI0 = 0;
  49   1          return (c);
  50   1      }
  51          
  52          void Send_Data_To_UART0 (u8 c)
C51 COMPILER V9.56.0.0   COMMON                                                            06/05/2021 17:28:18 PAGE 2   

  53          {
  54   1          TI0 = 0;
  55   1          S0BUF = c;
  56   1          while(TI0==0);
  57   1      }
  58          
  59          //从串口0发送一个字符
  60          void EUart0_SendOneChar(u8 c)
  61          {
  62   1        clr_ES0;      //发送数据时关串口中断
  63   1        clr_TI0;      //清TI位
  64   1        S0BUF = c;    //将待发送字符放入串口数据缓冲寄存器，并开始传输。
  65   1        while(!TI0);  //等待传送结束。当字符发送结束后由硬件置位请求中断，
  66   1                      //此时while循环结束，而串口中断处理函数需等到ES重新置1后才可能响应。
  67   1        clr_TI0;      //软件清TI位，亦可在中断处理函数中清0
  68   1        set_ES0;      //开串口中断
  69   1      }
  70          
  71          void EUart0_SendString(u8 *st)
  72          {
  73   1        while(*st)
  74   1        {
  75   2          EUart0_SendOneChar(*st++);
  76   2        }
  77   1      }
  78          
  79          
  80          //---------------------------------------------------------------
  81          void InitialUART1(u32 u32Baudrate) //use timer3 as Baudrate generator
  82          {
  83   1        set_UART1PORTEN;        //串口1端口使能
  84   1        S1CON |= (S1M0+REN1);   //SCON: Mode 1, 8-bit UART, Enable Rcvr
  85   1        S1RELL = LOBYTE(1024 - (baudrat_clk/u32Baudrate));    //Baud rate  = SYSCK/(16×(1024-S1REL))  SYSCK跟CLKDI
             -V寄存器有关
  86   1        S1RELH = HIBYTE(1024 - (baudrat_clk/u32Baudrate));    //S1RELH + S1RELL  构成波特率设置S1REL[9:0] 波特率：1
             -15200
  87   1        set_ES1;                //允许串口1中断位
  88   1      }
  89          
  90          u8 Receive_Data_From_UART1(void)
  91          {
  92   1          u8 c;
  93   1          while (S1CON & RI1);
  94   1          c = S1BUF;
  95   1          clr_RI1;
  96   1          return (c);
  97   1      }
  98          
  99          void Send_Data_To_UART1 (u8 c)
 100          {
 101   1        S1CON&=~TI1;          //清TI位
 102   1        S1BUF = c;            //将待发送字符放入串口数据缓冲寄存器，并开始传输。
 103   1        while(!(S1CON&TI1));  //等待传送结束。当字符发送结束后由硬件置位请求中断，
 104   1                              //此时while循环结束，而串口中断处理函数需等到ES重新置1后才可能响应。
 105   1      }
 106          
 107          //从串口1发送一个字符
 108          void EUart1_SendOneChar(u8 c)
 109          {
 110   1        clr_ES1;              //发送数据时关串口中断
 111   1        clr_TI1;              //清TI位
 112   1        S1BUF = c;            //将待发送字符放入串口数据缓冲寄存器，并开始传输。
C51 COMPILER V9.56.0.0   COMMON                                                            06/05/2021 17:28:18 PAGE 3   

 113   1        while(!(S1CON&TI1));  //等待传送结束。当字符发送结束后由硬件置位请求中断，
 114   1                              //此时while循环结束，而串口中断处理函数需等到ES重新置1后才可能响应。
 115   1        clr_TI1;              //软件清TI位，亦可在中断处理函数中清0
 116   1        set_ES1;              //开串口中断
 117   1      }
 118          
 119          //向串口1发送字符串
 120          void EUart1_SendString(u8 *st)
 121          {
 122   1        while(*st)
 123   1        {
 124   2          EUart1_SendOneChar(*st++);
 125   2        }
 126   1      }
 127          
 128          unsigned char HexToChar(unsigned char temp)
 129          {
 130   1        unsigned char dst;
 131   1        if (temp < 10)
 132   1        {
 133   2          dst = temp + '0';
 134   2        }
 135   1        else
 136   1        {
 137   2          dst = temp -10 +'A';
 138   2        }
 139   1        return dst;
 140   1      }
 141          
 142          void putHEX(unsigned char HEXValue)
 143          {
 144   1        EUart1_SendOneChar(HexToChar(HEXValue >> 4));
 145   1        EUart1_SendOneChar(HexToChar(HEXValue & 0x0F));
 146   1      }
 147          
 148          void EUart1_SendReg(u8 testreg)
 149          {
 150   1          EUart1_SendString("testreg"); 
 151   1          EUart1_SendString("=0X");
 152   1          putHEX(testreg);
 153   1          EUart1_SendString("\r\n");
 154   1      }
 155          
 156          u8 IAPUserReadData(u8 ADDRH,u8 ADDRL)
 157          {
 158   1        u8 ReadData;
 159   1        
 160   1        IAPDATA  = 0x00;
 161   1        IAPCTRL  = 0x00;    //读操作
 162   1        IAPLOCK  = 0x5A;
 163   1        IAPLOCK  = 0xA5;    //进入用户模式
 164   1      
 165   1        IAPADDRH = ADDRH;
 166   1        IAPADDRL = ADDRL;   //页地址
 167   1        IAPRD = 1;          //读操作
 168   1        IAPGO = 1;          //program
 169   1        _nop_();
 170   1        while(IAPGO != 0);  //判断是否操作完成
 171   1        if(IAPER == 0 & IAPFAIL == 0 )  //判断读的数据是否正确
 172   1        {
 173   2          ReadData = IAPDATA;
 174   2        }
C51 COMPILER V9.56.0.0   COMMON                                                            06/05/2021 17:28:18 PAGE 4   

 175   1        
 176   1        EUart1_SendString("IAP User Read DATA:");
 177   1        putHEX(ReadData);
 178   1        EUart1_SendString("\r\n");
 179   1        return ReadData;
 180   1      }
 181          
 182          void IAPUserWriteData(u8 ADDRH,u8 ADDRL,u8 WriteData)
 183          {
 184   1        IAPCTRL  = 0x00;  //写操作
 185   1        IAPLOCK  = 0x5A;
 186   1        IAPLOCK  = 0xA5;  //进入用户模式
 187   1        IAPDATA  = WriteData;
 188   1        
 189   1        IAPADDRH = ADDRH;
 190   1        IAPADDRL = ADDRL; //页地址
 191   1        IAPWR = 1;      //写操作
 192   1        IAPGO = 1;      //program
 193   1        _nop_();
 194   1        while(IAPGO != 0);  //判断是否操作完成
 195   1        EUart1_SendString("IAP User Write DATA OK\r\n");
 196   1      }
 197          
 198          void IAPUserEraseData(u8 ADDRH,u8 ADDRL)
 199          {
 200   1        IAPCTRL  = 0x00;  //写操作
 201   1        IAPLOCK  = 0x5A;
 202   1        IAPLOCK  = 0xA5;  //进入用户模式
 203   1        
 204   1        IAPADDRH = ADDRH;
 205   1        IAPADDRL = ADDRL; //页地址
 206   1        IAPER = 1;        //写操作
 207   1        IAPGO = 1;        //program
 208   1        _nop_();
 209   1        while(IAPGO != 0);  //判断是否操作完成
 210   1        EUart1_SendString("IAP User Erase DATA OK\r\n");
 211   1      }
 212          
 213          unsigned char READ_EEPROM(unsigned int Address)   
 214          {
 215   1        unsigned char Data=0;
 216   1        unsigned int TimeOutCunt=0xffff;
 217   1        IAPDATA=0x00;  //???????
 218   1        IAPCTRL=0x00;
 219   1        IAPLOCK=0x5A;
 220   1        IAPLOCK=0xA5;  //??
 221   1        IAPADDRH=Address>>8;
 222   1        IAPADDRL=Address;
 223   1        IAPRD=1; //?
 224   1        IAPGO=1; //????
 225   1        _nop_();
 226   1        while(IAPGO!=0) {if(--TimeOutCunt==0) break;}  //????????
 227   1        if(IAPER==0&&IAPFAIL==0) Data=IAPDATA;  //??????????
 228   1        return Data;
 229   1      }
 230          /***?EEPROM***/
 231          void WRITE_EEPROM(unsigned int Address,unsigned char Data)
 232          {
 233   1        unsigned int TimeOutCunt=0xffff;
 234   1        IAPCTRL=0x00;
 235   1        IAPLOCK=0x5A;
 236   1        IAPLOCK=0xA5;
C51 COMPILER V9.56.0.0   COMMON                                                            06/05/2021 17:28:18 PAGE 5   

 237   1        IAPADDRH=Address>>8;
 238   1        IAPADDRL=Address;
 239   1        IAPER=1;
 240   1        IAPGO=1;
 241   1        _nop_();
 242   1        while(IAPGO!=0) {if(--TimeOutCunt==0) break;}
 243   1        TimeOutCunt=0xffff;
 244   1      
 245   1        IAPCTRL=0x00;
 246   1        IAPLOCK=0x5A;
 247   1        IAPLOCK=0xA5;  //??
 248   1        IAPDATA=Data;
 249   1        IAPADDRH=Address>>8;
 250   1        IAPADDRL=Address;
 251   1        IAPWR=1;  //?
 252   1        IAPGO=1;  //????
 253   1        _nop_();
 254   1        while(IAPGO!=0) {if(--TimeOutCunt==0) break;}
 255   1      }
 256          /*==========================================================================*/
 257          #ifdef SW_Reset
              void SW_Reset(void)
              {
              //    TA = 0xAA;
              //    TA = 0x55;
              //    set_SWRST;
              }
              #endif
 265          /*==========================================================================*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    693    ----
   CONSTANT SIZE    =     85    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
